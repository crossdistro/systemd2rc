#!/usr/bin/python3

# Copyright (c) 2014, Pavel Å imerda <pavlix@pavlix.net>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met: 
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer. 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies, 
# either expressed or implied, of the FreeBSD Project.

import os, sys, logging, functools

logging.basicConfig(log_level=logging.DEBUG, style="{", format="systemd2rc: {message}")
log = logging.getLogger()
log.setLevel(logging.DEBUG)

LSB_HEADER ="""\
### BEGIN INIT INFO
# Provides: {unit.name}
# Required-Start: $remote_fs $syslog
# Required-Stop: $remote_fs $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: {unit.description}
### END INIT INFO
"""

DEBIAN_SIMPLE = """\
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="{unit.description}"
NAME={unit.name}
DAEMON={unit.exec_start_command}
DAEMON_ARGS="{unit.exec_start_args}"
PIDFILE={driver.pidfile}
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

do_start()
{{
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null || return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_ARGS || return 2
}}

do_stop()
{{
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	rm -f $PIDFILE
	return "$RETVAL"
}}

do_reload() {{
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}}

"""

DEBIAN_FOOTER = """\
case "$1" in
	start)
		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
		do_start
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;
	stop)
		[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;
	status)
		status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
		;;
	restart|force-reload)
		log_daemon_msg "Restarting $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1)
				do_start
				case "$?" in
					0) log_end_msg 0 ;;
					1) log_end_msg 1 ;; # Old process is still running
					*) log_end_msg 1 ;; # Failed to start
				esac
				;;
			*)
				# Failed to stop
				log_end_msg 1
				;;
		esac
		;;
	*)
	echo "Usage: $SCRIPTNAME {{start|stop|status|restart|force-reload}}" >&2
	exit 3
	;;
esac

:

"""

FEDORA_SIMPLE = """\
exec="{unit.exec_start}"
prog="{unit.name}"

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

lockfile=/var/lock/subsys/$prog

start() {{
    [ -x $exec ] || exit 5
    echo -n $"Starting $prog: "
    daemon $exec
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}}

stop() {{
    echo -n $"Stopping $prog: "
    killproc $prog
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}}

"""

FEDORA_FOOTER = """\
restart() {{
    stop
    start
}}

reload() {{
    restart
}}

force_reload() {{
    restart
}}

rh_status() {{
    status $prog
}}

rh_status_q() {{
    rh_status >/dev/null 2>&1
}}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {{start|stop|status|restart|condrestart|try-restart|reload|force-reload}}"
        exit 2
esac
exit $?

"""

class ConversionError(Exception):
    pass

class Option:
    def __init__(self, name):
        self.name = name
        self.values = []

    def add(self, *values):
        self.values += values

    def __str__(self):
        return '{} = {}'.format(self.name, self.value)

    @property
    def value(self):
        return ' '.join(self.values)

class Section:
    def __init__(self, name):
        self.name = name
        self.options = {}
        self.processed = set()

    def add(self, name, *values):
        for value in values:
            self.options.setdefault(name, Option(name)).add(value)

    def __lt__(self, other):
        return self.name < other.name

    def __str__(self):
        return self.name

    def __getitem__(self, name):
        option = self.options[name]

        log.debug("Processing: {}.{}".format(self.name, option))
        self.processed.add(name)

        return option

    @property
    def unprocessed(self):
        return iter(item for item in self.options if item not in self.processed)

class Unit:
    dep_types = ["Requisite", "Requires", "Wants", "Before", "After"]
    inline_multi_whitelist = [("Unit", dep_type) for dep_type in dep_types]

    def __init__(self, path):
        self.path = path
        self.name = os.path.split(path)[1].split('.')[0]
        self.sections = {}

        log.debug("Reading file: {!r}".format(path))

        with open(path) as stream:
            for line in stream:
                if line.startswith('['):
                    name = line.strip('[] \t\r\n')
                    section = self.sections[name] = Section(name)
                elif '=' in line:
                    name, value = (s.strip() for s in line.split('=', 1))
                    if (section.name, name) in self.inline_multi_whitelist:
                        section.add(name, *value.split())
                    else:
                        section.add(name, value)

    def __iter__(self):
        return iter(self.sections.values())

    def get(self, section, option, default=ConversionError, multi=False):
        try:
            option = self.sections[section][option]
            return option.values if multi else option.value
        except KeyError:
            if default is ConversionError:
                raise ConversionError("Missing option {}.{}".format(section, option))
            return default

    @property
    def description(self):
        return self.get("Unit", "Description", "")

    @property
    def service_type(self):
        return self.get("Service", "Type", "simple")

    @property
    def exec_start(self):
        return self.get("Service", "ExecStart")

    @property
    def exec_start_command(self):
        return self.exec_start.split(maxsplit=1)[0]

    @property
    def exec_start_args(self):
        return self.exec_start.split(maxsplit=1)[1]

class InitScript:
    shebang = "#!/bin/sh\n"
    generator_header = "#\n# Generated by: systemd2rc (using the {driver.name} driver)\n# Source: {unit.path}\n#\n"
    dependencies = ""

    pidfile_template = "/run/{}.pid"

    def __init__(self, unit, options):
        self.unit = unit
        self.options = options

        self.do_init()

    def __str__(self):
        return ''.join(iter(self))

    def __iter__(self):
        parts = ["shebang", "generator_header", "header"]
        if "nodeps" not in self.options:
            parts.append("dependencies")
        parts += ["actions", "footer"]
        for part in parts:
            yield from self.__do_part(part)

        unprocessed = sum([[(section.name, option) for option in section.unprocessed] for section in sorted(self.unit)], [])
        if unprocessed:
            log.warning("Ignored directives:")
            for section, option in unprocessed:
                log.warning(" * {}.{}".format(section, option))

    def __do_part(self, part):
        helper = getattr(self, "do_{}_{}".format(part, self.service_type), None) 
        template = getattr(self, "{}_{}".format(part, self.service_type), None)
        if helper is None and template is None:
            helper = getattr(self, "do_{}".format(part), None) 
            template = getattr(self, part, None)
        if helper is None and template is None:
            raise ConversionError("Driver {!r} doesn't support service type {!r}.".format(self.name, self.unit.service_type))
        return helper() if helper else [template.format(driver = self, unit = self.unit)]

    def do_init(self):
        pass

    def do_commands(self, option_name):
        for command in self.unit.get("Service", option_name, multi=True, default=[]):
            if command.startswith('-'):
                yield "    {}\n".format(command[1:])
            else:
                yield "    {} || return 2\n".format(command)

    def do_actions_oneshot(self):
        yield 'start() {\n'
        yield from self.do_commands("ExecStartPre")
        yield from self.do_commands("ExecStart")
        yield from self.do_commands("ExecStartPost")
        yield '}\n\n'

    @property
    def pidfile(self):
        try:
            return self.options["pidfile"]
        except KeyError:
            return self.unit.get("Service", "PidFile", self.pidfile_template.format(self.unit.name))

    @property
    def service_type(self):
        service_type = self.unit.service_type
        # Treat dbus services as simple services.
        return "simple" if service_type == "dbus" else service_type

class DebianInitScript(InitScript):
    name = "debian"
    check_path = "/etc/debian_version"

    header = LSB_HEADER + "\n"
    actions_simple = DEBIAN_SIMPLE
    footer = DEBIAN_FOOTER

    pidfile_template = "/var/run/{}.pid"

class GentooInitScript(InitScript):
    name = "gentoo"
    check_path = "/etc/gentoo-release"

    shebang = "#!/sbin/runscript\n"
    header = "#\n# Description: {unit.description}\n#\n\n"
    footer = ""

    def do_dependencies(self):
        services = {}
        unsupported_deps = []

        for dep_type in self.unit.dep_types:
            for service in self.unit.get("Unit", dep_type, default=(), multi=True):
                if service == "network.target":
                    service = "net"
                elif service.endswith(".service"):
                    service = service[:-8]
                elif "." in service:
                    unsupported_deps.append((service, dep_type))
                    continue
                services.setdefault(service, set()).add(dep_type)

        if services:
            yield "depend() {\n"
            for service, deps in sorted(services.items()):
                if "Requisite" in deps or "Requires" in deps:
                    yield "    need {}\n".format(service)
                elif "Wants" in deps:
                    yield "    use {}\n".format(service)
                elif "Before" in deps:
                    yield "    before {}\n".format(service)
                elif "After" in deps:
                    yield "    after {}\n".format(service)
                else:
                    raise ValueError("Bad dependency set: {}".format(deps))
            yield "}\n\n"

        if unsupported_deps:
            log.warning("Ignored dependencies:")
            for service, dep_type in unsupported_deps:
                log.warning(" * {} = {}\n".format(dep_type, service))

    def _do_actions(self, startopts="", stopopts=""):
        yield 'COMMAND="{}"\n'.format(self.unit.get("Service", "ExecStart", multi=True)[0])
        yield 'PIDFILE="{}"\n'.format(self.pidfile)
        yield 'STARTOPTS="--start --make-pidfile --background --quiet"\n'
        yield 'STOPOPTS="--quiet"\n\n'

        yield 'start() {\n    ebegin "Starting $SVCNAME"\n'
        yield from self.do_commands("ExecStartPre")
        yield '    start-stop-daemon --start $STARTOPTS --pidfile "$PIDFILE" -- $COMMAND || error\n'
        yield from self.do_commands("ExecStartPost")
        yield '    eend 0\n}\n\n'
        yield 'stop() {\n    ebegin "Stopping $SVCNAME"\n'
        yield from self.do_commands("ExecStopPre")
        yield '    start-stop-daemon --stop $STOPOPTS --pidfile "$PIDFILE"\n'
        yield from self.do_commands("ExecStopPost")
        yield '    eend 0\n}\n\n'
        yield 'reload() {\n    ebegin "Reloading $SVCNAME"\n'
        yield '    start-stop-daemon --signal HUP --pidfile "$PIDFILE" || error\n'
        yield '    eend 0\n}\n\n'
        yield 'error() {\n'
        yield '    start-stop-daemon --signal KILL --pidfile "$PIDFILE"\n'
        yield '    eend 1\n}\n\n'

    def do_actions_oneshot(self):
        yield 'start() {\n    ebegin "Starting $SVCNAME"\n'
        yield from self.do_commands("ExecStartPre")
        yield from self.do_commands("ExecStart")
        yield from self.do_commands("ExecStartPost")
        yield '    eend 0\n}\n\n'

    def do_actions_simple(self):
        return self._do_actions(startopts="--start --make-pidfile --background --quiet", stopopts="--quiet")

    def do_actions_forking(self):
        return self._do_actions()

    def do_commands(self, option_name):
        for command in self.unit.get("Service", option_name, multi=True, default=[]):
            if command.startswith('-'):
                yield "    {}\n".format(command[1:])
            else:
                yield "    {} || error\n".format(command)

class FedoraInitScript(InitScript):
    name = "fedora"
    check_path = "/etc/redhat-release"

    header = (
            "# {unit.name} {unit.description}\n#\n"
            "# chkconfig:   <default runlevel(s)> <start> <stop>\n"
            "# description: {unit.description}\n#\n"
            + LSB_HEADER +
            "\n# Source function library.\n"
            ". /etc/rc.d/init.d/functions\n\n")
    actions_simple = FEDORA_SIMPLE
    footer = FEDORA_FOOTER

candidates = [DebianInitScript, GentooInitScript, FedoraInitScript]
candidates_by_option = { "--" + candidate.name: candidate for candidate in candidates}

def usage():
    exit("Usage: systemd2rc [ {} ] [ OPTIONS ] <path>".format(' | '.join(candidates_by_option)))

if __name__ == '__main__':
    cls = None
    path = None
    options = {}

    sys.argv.pop(0)
    while sys.argv:
        arg = sys.argv.pop(0)
        if arg in candidates_by_option:
            cls = candidates_by_option[arg]
        elif arg == '--pidfile':
            options["pidfile"] = sys.argv.pop(0)
        elif arg == '--nodeps':
            options["nodeps"] = True
        elif not path and not arg.startswith('-'):
            path = arg
        else:
            usage()

    if cls is None:
        for candidate in candidates:
            if candidate.check_path and os.path.exists(candidate.check_path):
                cls = candidate
                break
        else:
            exit("Distribution detection failed.")

    if path is None:
        usage()

    sys.stdout.write(str(cls(Unit(path), options)))
